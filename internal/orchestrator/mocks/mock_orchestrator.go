// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rizesky/mckmt/internal/orchestrator (interfaces: MetricsProvider)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_orchestrator.go -package=mocks github.com/rizesky/mckmt/internal/orchestrator MetricsProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsProvider is a mock of MetricsProvider interface.
type MockMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsProviderMockRecorder
	isgomock struct{}
}

// MockMetricsProviderMockRecorder is the mock recorder for MockMetricsProvider.
type MockMetricsProviderMockRecorder struct {
	mock *MockMetricsProvider
}

// NewMockMetricsProvider creates a new mock instance.
func NewMockMetricsProvider(ctrl *gomock.Controller) *MockMetricsProvider {
	mock := &MockMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsProvider) EXPECT() *MockMetricsProviderMockRecorder {
	return m.recorder
}

// DecHTTPRequestsInFlight mocks base method.
func (m *MockMetricsProvider) DecHTTPRequestsInFlight(method, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecHTTPRequestsInFlight", method, endpoint)
}

// DecHTTPRequestsInFlight indicates an expected call of DecHTTPRequestsInFlight.
func (mr *MockMetricsProviderMockRecorder) DecHTTPRequestsInFlight(method, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecHTTPRequestsInFlight", reflect.TypeOf((*MockMetricsProvider)(nil).DecHTTPRequestsInFlight), method, endpoint)
}

// DecOperationsInProgress mocks base method.
func (m *MockMetricsProvider) DecOperationsInProgress(clusterID, operationType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecOperationsInProgress", clusterID, operationType)
}

// DecOperationsInProgress indicates an expected call of DecOperationsInProgress.
func (mr *MockMetricsProviderMockRecorder) DecOperationsInProgress(clusterID, operationType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecOperationsInProgress", reflect.TypeOf((*MockMetricsProvider)(nil).DecOperationsInProgress), clusterID, operationType)
}

// IncHTTPRequestsInFlight mocks base method.
func (m *MockMetricsProvider) IncHTTPRequestsInFlight(method, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncHTTPRequestsInFlight", method, endpoint)
}

// IncHTTPRequestsInFlight indicates an expected call of IncHTTPRequestsInFlight.
func (mr *MockMetricsProviderMockRecorder) IncHTTPRequestsInFlight(method, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncHTTPRequestsInFlight", reflect.TypeOf((*MockMetricsProvider)(nil).IncHTTPRequestsInFlight), method, endpoint)
}

// IncOperationsInProgress mocks base method.
func (m *MockMetricsProvider) IncOperationsInProgress(clusterID, operationType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncOperationsInProgress", clusterID, operationType)
}

// IncOperationsInProgress indicates an expected call of IncOperationsInProgress.
func (mr *MockMetricsProviderMockRecorder) IncOperationsInProgress(clusterID, operationType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncOperationsInProgress", reflect.TypeOf((*MockMetricsProvider)(nil).IncOperationsInProgress), clusterID, operationType)
}

// IncrementCounter mocks base method.
func (m *MockMetricsProvider) IncrementCounter(name string, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementCounter", name, tags)
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockMetricsProviderMockRecorder) IncrementCounter(name, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockMetricsProvider)(nil).IncrementCounter), name, tags)
}

// IncrementGauge mocks base method.
func (m *MockMetricsProvider) IncrementGauge(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementGauge", name, value, tags)
}

// IncrementGauge indicates an expected call of IncrementGauge.
func (mr *MockMetricsProviderMockRecorder) IncrementGauge(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementGauge", reflect.TypeOf((*MockMetricsProvider)(nil).IncrementGauge), name, value, tags)
}

// RecordAgentHeartbeat mocks base method.
func (m *MockMetricsProvider) RecordAgentHeartbeat(clusterID, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAgentHeartbeat", clusterID, status)
}

// RecordAgentHeartbeat indicates an expected call of RecordAgentHeartbeat.
func (mr *MockMetricsProviderMockRecorder) RecordAgentHeartbeat(clusterID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAgentHeartbeat", reflect.TypeOf((*MockMetricsProvider)(nil).RecordAgentHeartbeat), clusterID, status)
}

// RecordCacheHit mocks base method.
func (m *MockMetricsProvider) RecordCacheHit(cacheType, keyPattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordCacheHit", cacheType, keyPattern)
}

// RecordCacheHit indicates an expected call of RecordCacheHit.
func (mr *MockMetricsProviderMockRecorder) RecordCacheHit(cacheType, keyPattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCacheHit", reflect.TypeOf((*MockMetricsProvider)(nil).RecordCacheHit), cacheType, keyPattern)
}

// RecordCacheMiss mocks base method.
func (m *MockMetricsProvider) RecordCacheMiss(cacheType, keyPattern string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordCacheMiss", cacheType, keyPattern)
}

// RecordCacheMiss indicates an expected call of RecordCacheMiss.
func (mr *MockMetricsProviderMockRecorder) RecordCacheMiss(cacheType, keyPattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCacheMiss", reflect.TypeOf((*MockMetricsProvider)(nil).RecordCacheMiss), cacheType, keyPattern)
}

// RecordCacheOperation mocks base method.
func (m *MockMetricsProvider) RecordCacheOperation(operation, cacheType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordCacheOperation", operation, cacheType)
}

// RecordCacheOperation indicates an expected call of RecordCacheOperation.
func (mr *MockMetricsProviderMockRecorder) RecordCacheOperation(operation, cacheType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCacheOperation", reflect.TypeOf((*MockMetricsProvider)(nil).RecordCacheOperation), operation, cacheType)
}

// RecordDatabaseQuery mocks base method.
func (m *MockMetricsProvider) RecordDatabaseQuery(operation, table string, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDatabaseQuery", operation, table, duration)
}

// RecordDatabaseQuery indicates an expected call of RecordDatabaseQuery.
func (mr *MockMetricsProviderMockRecorder) RecordDatabaseQuery(operation, table, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDatabaseQuery", reflect.TypeOf((*MockMetricsProvider)(nil).RecordDatabaseQuery), operation, table, duration)
}

// RecordHTTPRequest mocks base method.
func (m *MockMetricsProvider) RecordHTTPRequest(method, endpoint, statusCode string, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHTTPRequest", method, endpoint, statusCode, duration)
}

// RecordHTTPRequest indicates an expected call of RecordHTTPRequest.
func (mr *MockMetricsProviderMockRecorder) RecordHTTPRequest(method, endpoint, statusCode, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHTTPRequest", reflect.TypeOf((*MockMetricsProvider)(nil).RecordHTTPRequest), method, endpoint, statusCode, duration)
}

// RecordHistogram mocks base method.
func (m *MockMetricsProvider) RecordHistogram(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHistogram", name, value, tags)
}

// RecordHistogram indicates an expected call of RecordHistogram.
func (mr *MockMetricsProviderMockRecorder) RecordHistogram(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHistogram", reflect.TypeOf((*MockMetricsProvider)(nil).RecordHistogram), name, value, tags)
}

// RecordOperation mocks base method.
func (m *MockMetricsProvider) RecordOperation(clusterID, operationType, status string, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperation", clusterID, operationType, status, duration)
}

// RecordOperation indicates an expected call of RecordOperation.
func (mr *MockMetricsProviderMockRecorder) RecordOperation(clusterID, operationType, status, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperation", reflect.TypeOf((*MockMetricsProvider)(nil).RecordOperation), clusterID, operationType, status, duration)
}

// SetAgentLastHeartbeat mocks base method.
func (m *MockMetricsProvider) SetAgentLastHeartbeat(clusterID string, timestamp float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAgentLastHeartbeat", clusterID, timestamp)
}

// SetAgentLastHeartbeat indicates an expected call of SetAgentLastHeartbeat.
func (mr *MockMetricsProviderMockRecorder) SetAgentLastHeartbeat(clusterID, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAgentLastHeartbeat", reflect.TypeOf((*MockMetricsProvider)(nil).SetAgentLastHeartbeat), clusterID, timestamp)
}

// SetAgentsConnected mocks base method.
func (m *MockMetricsProvider) SetAgentsConnected(clusterID, agentVersion string, count float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAgentsConnected", clusterID, agentVersion, count)
}

// SetAgentsConnected indicates an expected call of SetAgentsConnected.
func (mr *MockMetricsProviderMockRecorder) SetAgentsConnected(clusterID, agentVersion, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAgentsConnected", reflect.TypeOf((*MockMetricsProvider)(nil).SetAgentsConnected), clusterID, agentVersion, count)
}

// SetClusterLastSeen mocks base method.
func (m *MockMetricsProvider) SetClusterLastSeen(clusterID, clusterName string, timestamp float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClusterLastSeen", clusterID, clusterName, timestamp)
}

// SetClusterLastSeen indicates an expected call of SetClusterLastSeen.
func (mr *MockMetricsProviderMockRecorder) SetClusterLastSeen(clusterID, clusterName, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterLastSeen", reflect.TypeOf((*MockMetricsProvider)(nil).SetClusterLastSeen), clusterID, clusterName, timestamp)
}

// SetClusterStatus mocks base method.
func (m *MockMetricsProvider) SetClusterStatus(clusterID, clusterName, mode, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClusterStatus", clusterID, clusterName, mode, status)
}

// SetClusterStatus indicates an expected call of SetClusterStatus.
func (mr *MockMetricsProviderMockRecorder) SetClusterStatus(clusterID, clusterName, mode, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterStatus", reflect.TypeOf((*MockMetricsProvider)(nil).SetClusterStatus), clusterID, clusterName, mode, status)
}

// SetClustersTotal mocks base method.
func (m *MockMetricsProvider) SetClustersTotal(mode, status string, count float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClustersTotal", mode, status, count)
}

// SetClustersTotal indicates an expected call of SetClustersTotal.
func (mr *MockMetricsProviderMockRecorder) SetClustersTotal(mode, status, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClustersTotal", reflect.TypeOf((*MockMetricsProvider)(nil).SetClustersTotal), mode, status, count)
}

// SetDatabaseConnections mocks base method.
func (m *MockMetricsProvider) SetDatabaseConnections(state string, count float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabaseConnections", state, count)
}

// SetDatabaseConnections indicates an expected call of SetDatabaseConnections.
func (mr *MockMetricsProviderMockRecorder) SetDatabaseConnections(state, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseConnections", reflect.TypeOf((*MockMetricsProvider)(nil).SetDatabaseConnections), state, count)
}
