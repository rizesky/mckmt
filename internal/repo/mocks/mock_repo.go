// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rizesky/mckmt/internal/repo (interfaces: ClusterRepository,OperationRepository,AuditLogRepository,UserRepository,RoleRepository,Cache,EventBus)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_repo.go -package=mocks github.com/rizesky/mckmt/internal/repo ClusterRepository,OperationRepository,AuditLogRepository,UserRepository,RoleRepository,Cache,EventBus
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	repo "github.com/rizesky/mckmt/internal/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterRepository is a mock of ClusterRepository interface.
type MockClusterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRepositoryMockRecorder
	isgomock struct{}
}

// MockClusterRepositoryMockRecorder is the mock recorder for MockClusterRepository.
type MockClusterRepositoryMockRecorder struct {
	mock *MockClusterRepository
}

// NewMockClusterRepository creates a new mock instance.
func NewMockClusterRepository(ctrl *gomock.Controller) *MockClusterRepository {
	mock := &MockClusterRepository{ctrl: ctrl}
	mock.recorder = &MockClusterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRepository) EXPECT() *MockClusterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterRepository) Create(ctx context.Context, cluster *repo.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClusterRepositoryMockRecorder) Create(ctx, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterRepository)(nil).Create), ctx, cluster)
}

// Delete mocks base method.
func (m *MockClusterRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockClusterRepository) GetByID(ctx context.Context, id uuid.UUID) (*repo.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repo.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockClusterRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockClusterRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockClusterRepository) GetByName(ctx context.Context, name string) (*repo.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*repo.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockClusterRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockClusterRepository)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockClusterRepository) List(ctx context.Context, limit, offset int) ([]*repo.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*repo.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockClusterRepository) Update(ctx context.Context, cluster *repo.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClusterRepositoryMockRecorder) Update(ctx, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterRepository)(nil).Update), ctx, cluster)
}

// UpdateLastSeen mocks base method.
func (m *MockClusterRepository) UpdateLastSeen(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSeen", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSeen indicates an expected call of UpdateLastSeen.
func (mr *MockClusterRepositoryMockRecorder) UpdateLastSeen(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSeen", reflect.TypeOf((*MockClusterRepository)(nil).UpdateLastSeen), ctx, id)
}

// UpdateStatus mocks base method.
func (m *MockClusterRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClusterRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterRepository)(nil).UpdateStatus), ctx, id, status)
}

// MockOperationRepository is a mock of OperationRepository interface.
type MockOperationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOperationRepositoryMockRecorder
	isgomock struct{}
}

// MockOperationRepositoryMockRecorder is the mock recorder for MockOperationRepository.
type MockOperationRepositoryMockRecorder struct {
	mock *MockOperationRepository
}

// NewMockOperationRepository creates a new mock instance.
func NewMockOperationRepository(ctrl *gomock.Controller) *MockOperationRepository {
	mock := &MockOperationRepository{ctrl: ctrl}
	mock.recorder = &MockOperationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationRepository) EXPECT() *MockOperationRepositoryMockRecorder {
	return m.recorder
}

// CancelOperation mocks base method.
func (m *MockOperationRepository) CancelOperation(ctx context.Context, id uuid.UUID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOperation", ctx, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOperation indicates an expected call of CancelOperation.
func (mr *MockOperationRepositoryMockRecorder) CancelOperation(ctx, id, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOperation", reflect.TypeOf((*MockOperationRepository)(nil).CancelOperation), ctx, id, reason)
}

// Create mocks base method.
func (m *MockOperationRepository) Create(ctx context.Context, operation *repo.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOperationRepositoryMockRecorder) Create(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperationRepository)(nil).Create), ctx, operation)
}

// GetByID mocks base method.
func (m *MockOperationRepository) GetByID(ctx context.Context, id uuid.UUID) (*repo.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repo.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOperationRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOperationRepository)(nil).GetByID), ctx, id)
}

// ListByCluster mocks base method.
func (m *MockOperationRepository) ListByCluster(ctx context.Context, clusterID uuid.UUID, limit, offset int) ([]*repo.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCluster", ctx, clusterID, limit, offset)
	ret0, _ := ret[0].([]*repo.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCluster indicates an expected call of ListByCluster.
func (mr *MockOperationRepositoryMockRecorder) ListByCluster(ctx, clusterID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCluster", reflect.TypeOf((*MockOperationRepository)(nil).ListByCluster), ctx, clusterID, limit, offset)
}

// SetFinished mocks base method.
func (m *MockOperationRepository) SetFinished(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished.
func (mr *MockOperationRepositoryMockRecorder) SetFinished(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockOperationRepository)(nil).SetFinished), ctx, id)
}

// SetStarted mocks base method.
func (m *MockOperationRepository) SetStarted(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStarted", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStarted indicates an expected call of SetStarted.
func (mr *MockOperationRepositoryMockRecorder) SetStarted(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStarted", reflect.TypeOf((*MockOperationRepository)(nil).SetStarted), ctx, id)
}

// Update mocks base method.
func (m *MockOperationRepository) Update(ctx context.Context, operation *repo.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOperationRepositoryMockRecorder) Update(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOperationRepository)(nil).Update), ctx, operation)
}

// UpdateResult mocks base method.
func (m *MockOperationRepository) UpdateResult(ctx context.Context, id uuid.UUID, result repo.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResult", ctx, id, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResult indicates an expected call of UpdateResult.
func (mr *MockOperationRepositoryMockRecorder) UpdateResult(ctx, id, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResult", reflect.TypeOf((*MockOperationRepository)(nil).UpdateResult), ctx, id, result)
}

// UpdateStatus mocks base method.
func (m *MockOperationRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOperationRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOperationRepository)(nil).UpdateStatus), ctx, id, status)
}

// MockAuditLogRepository is a mock of AuditLogRepository interface.
type MockAuditLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogRepositoryMockRecorder
	isgomock struct{}
}

// MockAuditLogRepositoryMockRecorder is the mock recorder for MockAuditLogRepository.
type MockAuditLogRepositoryMockRecorder struct {
	mock *MockAuditLogRepository
}

// NewMockAuditLogRepository creates a new mock instance.
func NewMockAuditLogRepository(ctrl *gomock.Controller) *MockAuditLogRepository {
	mock := &MockAuditLogRepository{ctrl: ctrl}
	mock.recorder = &MockAuditLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogRepository) EXPECT() *MockAuditLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditLogRepository) Create(ctx context.Context, log *repo.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuditLogRepositoryMockRecorder) Create(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditLogRepository)(nil).Create), ctx, log)
}

// List mocks base method.
func (m *MockAuditLogRepository) List(ctx context.Context, userID string, limit, offset int) ([]*repo.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*repo.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuditLogRepositoryMockRecorder) List(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuditLogRepository)(nil).List), ctx, userID, limit, offset)
}

// ListByResource mocks base method.
func (m *MockAuditLogRepository) ListByResource(ctx context.Context, resourceType, resourceID string, limit, offset int) ([]*repo.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResource", ctx, resourceType, resourceID, limit, offset)
	ret0, _ := ret[0].([]*repo.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResource indicates an expected call of ListByResource.
func (mr *MockAuditLogRepositoryMockRecorder) ListByResource(ctx, resourceType, resourceID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResource", reflect.TypeOf((*MockAuditLogRepository)(nil).ListByResource), ctx, resourceType, resourceID, limit, offset)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *repo.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(ctx context.Context, email string) (*repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, id uuid.UUID) (*repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserRepository) GetByUsername(ctx context.Context, username string) (*repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepositoryMockRecorder) GetByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetByUsername), ctx, username)
}

// List mocks base method.
func (m *MockUserRepository) List(ctx context.Context, limit, offset int) ([]*repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *repo.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleRepository) Create(ctx context.Context, role *repo.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleRepositoryMockRecorder) Create(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepository)(nil).Create), ctx, role)
}

// Delete mocks base method.
func (m *MockRoleRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockRoleRepository) GetByID(ctx context.Context, id uuid.UUID) (*repo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRoleRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRoleRepository)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockRoleRepository) GetByName(ctx context.Context, name string) (*repo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*repo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRoleRepositoryMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRoleRepository)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockRoleRepository) List(ctx context.Context, limit, offset int) ([]*repo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*repo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockRoleRepository) Update(ctx context.Context, role *repo.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleRepositoryMockRecorder) Update(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleRepository)(nil).Update), ctx, role)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// ClusterKey mocks base method.
func (m *MockCache) ClusterKey(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterKey", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterKey indicates an expected call of ClusterKey.
func (mr *MockCacheMockRecorder) ClusterKey(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterKey", reflect.TypeOf((*MockCache)(nil).ClusterKey), id)
}

// ClusterMetricsKey mocks base method.
func (m *MockCache) ClusterMetricsKey(clusterID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMetricsKey", clusterID)
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterMetricsKey indicates an expected call of ClusterMetricsKey.
func (mr *MockCacheMockRecorder) ClusterMetricsKey(clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMetricsKey", reflect.TypeOf((*MockCache)(nil).ClusterMetricsKey), clusterID)
}

// ClusterResourceKey mocks base method.
func (m *MockCache) ClusterResourceKey(clusterID, kind, namespace, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResourceKey", clusterID, kind, namespace, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterResourceKey indicates an expected call of ClusterResourceKey.
func (mr *MockCacheMockRecorder) ClusterResourceKey(clusterID, kind, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResourceKey", reflect.TypeOf((*MockCache)(nil).ClusterResourceKey), clusterID, kind, namespace, name)
}

// ClusterResourcesKey mocks base method.
func (m *MockCache) ClusterResourcesKey(clusterID, kind, namespace string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResourcesKey", clusterID, kind, namespace)
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterResourcesKey indicates an expected call of ClusterResourcesKey.
func (mr *MockCacheMockRecorder) ClusterResourcesKey(clusterID, kind, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResourcesKey", reflect.TypeOf((*MockCache)(nil).ClusterResourcesKey), clusterID, kind, namespace)
}

// ClusterStatusKey mocks base method.
func (m *MockCache) ClusterStatusKey(clusterID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterStatusKey", clusterID)
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterStatusKey indicates an expected call of ClusterStatusKey.
func (mr *MockCacheMockRecorder) ClusterStatusKey(clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterStatusKey", reflect.TypeOf((*MockCache)(nil).ClusterStatusKey), clusterID)
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// FlushDB mocks base method.
func (m *MockCache) FlushDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDB indicates an expected call of FlushDB.
func (mr *MockCacheMockRecorder) FlushDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDB", reflect.TypeOf((*MockCache)(nil).FlushDB), ctx)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key, dest)
}

// Health mocks base method.
func (m *MockCache) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockCacheMockRecorder) Health(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockCache)(nil).Health), ctx)
}

// Keys mocks base method.
func (m *MockCache) Keys(ctx context.Context, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", ctx, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys.
func (mr *MockCacheMockRecorder) Keys(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockCache)(nil).Keys), ctx, pattern)
}

// OperationKey mocks base method.
func (m *MockCache) OperationKey(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationKey", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// OperationKey indicates an expected call of OperationKey.
func (mr *MockCacheMockRecorder) OperationKey(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationKey", reflect.TypeOf((*MockCache)(nil).OperationKey), id)
}

// Ping mocks base method.
func (m *MockCache) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCacheMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCache)(nil).Ping), ctx)
}

// SessionKey mocks base method.
func (m *MockCache) SessionKey(token string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionKey", token)
	ret0, _ := ret[0].(string)
	return ret0
}

// SessionKey indicates an expected call of SessionKey.
func (mr *MockCacheMockRecorder) SessionKey(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionKey", reflect.TypeOf((*MockCache)(nil).SessionKey), token)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, expiration)
}

// UserKey mocks base method.
func (m *MockCache) UserKey(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserKey", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// UserKey indicates an expected call of UserKey.
func (mr *MockCacheMockRecorder) UserKey(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserKey", reflect.TypeOf((*MockCache)(nil).UserKey), id)
}

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
	isgomock struct{}
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBus) Publish(ctx context.Context, topic string, event any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, topic, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(ctx, topic, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), ctx, topic, event)
}

// Subscribe mocks base method.
func (m *MockEventBus) Subscribe(ctx context.Context, topic string, handler func(any) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusMockRecorder) Subscribe(ctx, topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), ctx, topic, handler)
}
