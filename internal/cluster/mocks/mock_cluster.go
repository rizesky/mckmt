// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rizesky/mckmt/internal/cluster (interfaces: OrchestratorInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_cluster.go -package=mocks github.com/rizesky/mckmt/internal/cluster OrchestratorInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	repo "github.com/rizesky/mckmt/internal/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockOrchestratorInterface is a mock of OrchestratorInterface interface.
type MockOrchestratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorInterfaceMockRecorder
	isgomock struct{}
}

// MockOrchestratorInterfaceMockRecorder is the mock recorder for MockOrchestratorInterface.
type MockOrchestratorInterfaceMockRecorder struct {
	mock *MockOrchestratorInterface
}

// NewMockOrchestratorInterface creates a new mock instance.
func NewMockOrchestratorInterface(ctrl *gomock.Controller) *MockOrchestratorInterface {
	mock := &MockOrchestratorInterface{ctrl: ctrl}
	mock.recorder = &MockOrchestratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorInterface) EXPECT() *MockOrchestratorInterfaceMockRecorder {
	return m.recorder
}

// QueueOperation mocks base method.
func (m *MockOrchestratorInterface) QueueOperation(operation *repo.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueOperation", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueOperation indicates an expected call of QueueOperation.
func (mr *MockOrchestratorInterfaceMockRecorder) QueueOperation(operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueOperation", reflect.TypeOf((*MockOrchestratorInterface)(nil).QueueOperation), operation)
}
