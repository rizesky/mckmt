// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rizesky/mckmt/internal/api/http (interfaces: ClusterManager)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_http.go -package=mocks github.com/rizesky/mckmt/internal/api/http ClusterManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	repo "github.com/rizesky/mckmt/internal/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterManager is a mock of ClusterManager interface.
type MockClusterManager struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerMockRecorder
	isgomock struct{}
}

// MockClusterManagerMockRecorder is the mock recorder for MockClusterManager.
type MockClusterManagerMockRecorder struct {
	mock *MockClusterManager
}

// NewMockClusterManager creates a new mock instance.
func NewMockClusterManager(ctrl *gomock.Controller) *MockClusterManager {
	mock := &MockClusterManager{ctrl: ctrl}
	mock.recorder = &MockClusterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManager) EXPECT() *MockClusterManagerMockRecorder {
	return m.recorder
}

// CreateOperation mocks base method.
func (m *MockClusterManager) CreateOperation(ctx context.Context, operation *repo.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperation", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOperation indicates an expected call of CreateOperation.
func (mr *MockClusterManagerMockRecorder) CreateOperation(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperation", reflect.TypeOf((*MockClusterManager)(nil).CreateOperation), ctx, operation)
}

// DeleteCluster mocks base method.
func (m *MockClusterManager) DeleteCluster(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterManagerMockRecorder) DeleteCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterManager)(nil).DeleteCluster), ctx, id)
}

// GetCluster mocks base method.
func (m *MockClusterManager) GetCluster(ctx context.Context, id uuid.UUID) (*repo.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, id)
	ret0, _ := ret[0].(*repo.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterManagerMockRecorder) GetCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterManager)(nil).GetCluster), ctx, id)
}

// GetClusterResources mocks base method.
func (m *MockClusterManager) GetClusterResources(ctx context.Context, clusterID uuid.UUID, kind, namespace string) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterResources", ctx, clusterID, kind, namespace)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterResources indicates an expected call of GetClusterResources.
func (mr *MockClusterManagerMockRecorder) GetClusterResources(ctx, clusterID, kind, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterResources", reflect.TypeOf((*MockClusterManager)(nil).GetClusterResources), ctx, clusterID, kind, namespace)
}

// ListClusters mocks base method.
func (m *MockClusterManager) ListClusters(ctx context.Context, limit, offset int) ([]*repo.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, limit, offset)
	ret0, _ := ret[0].([]*repo.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClusterManagerMockRecorder) ListClusters(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClusterManager)(nil).ListClusters), ctx, limit, offset)
}

// QueueOperation mocks base method.
func (m *MockClusterManager) QueueOperation(ctx context.Context, operation *repo.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueOperation", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueOperation indicates an expected call of QueueOperation.
func (mr *MockClusterManagerMockRecorder) QueueOperation(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueOperation", reflect.TypeOf((*MockClusterManager)(nil).QueueOperation), ctx, operation)
}

// UpdateCluster mocks base method.
func (m *MockClusterManager) UpdateCluster(ctx context.Context, id uuid.UUID, name, description string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, id, name, description, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockClusterManagerMockRecorder) UpdateCluster(ctx, id, name, description, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockClusterManager)(nil).UpdateCluster), ctx, id, name, description, labels)
}
