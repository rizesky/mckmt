services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mckmt-postgres
    environment:
      POSTGRES_DB: ${MCKMT_DATABASE_NAME:-mckmt}
      POSTGRES_USER: ${MCKMT_DATABASE_USER:-mckmt}
      POSTGRES_PASSWORD: ${MCKMT_DATABASE_PASSWORD:-mckmt}
    ports:
      - "${MCKMT_DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MCKMT_DATABASE_USER:-mckmt} -d ${MCKMT_DATABASE_NAME:-mckmt}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Init Container
  db-init:
    image: migrate/migrate:latest
    container_name: mckmt-db-init
    environment:
      - PGPASSWORD=${MCKMT_DATABASE_PASSWORD:-mckmt}
    depends_on:
      postgres:
        condition: service_healthy
    command: ["-path", "/migrations", "-database", "postgres://${MCKMT_DATABASE_USER:-mckmt}:${MCKMT_DATABASE_PASSWORD:-mckmt}@postgres:${MCKMT_DATABASE_PORT:-5432}/${MCKMT_DATABASE_NAME:-mckmt}?sslmode=disable", "up"]
    volumes:
      - ../../migrations:/migrations:ro

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mckmt-redis
    ports:
      - "${MCKMT_REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MCKMT Hub API
  hub:
    image: mckmt/hub:latest
    container_name: mckmt-hub
    ports:
      - "${MCKMT_SERVER_PORT:-8080}:8080"
      - "${MCKMT_GRPC_PORT:-8081}:8081"
      - "${MCKMT_METRICS_PORT:-9091}:9091"
    environment:
      # Override only what's different from hub_config.yaml defaults
      - MCKMT_DATABASE_HOST=postgres
      - MCKMT_REDIS_HOST=redis
      - MCKMT_CONFIG_FILE=${MCKMT_CONFIG_FILE:-configs/hub_config.yaml}
    depends_on:
      db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ../../configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mckmt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - hub

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mckmt-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/mckmt-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../configs/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

  # Keycloak OIDC Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: mckmt-keycloak
    environment:
      # Keycloak configuration
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8082
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      # Development settings
      KC_LOG_LEVEL: INFO
      KC_FEATURES: preview
    ports:
      - "8082:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    command: start-dev

  # Keycloak Database
  keycloak-db:
    image: postgres:15-alpine
    container_name: mckmt-keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  keycloak_db_data:
